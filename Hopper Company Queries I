Write an SQL query to report the following statistics for each month of 2020:

The number of drivers currently with the Hopper company by the end of the month (active_drivers).
The number of accepted rides in that month (accepted_rides).
Return the result table ordered by month in ascending order, where month is the month's number (January is 1, February is 2, etc.).

The query result format is in the following example.

 

Example 1:

Input: 
Drivers table:
+-----------+------------+
| driver_id | join_date  |
+-----------+------------+
| 10        | 2019-12-10 |
| 8         | 2020-1-13  |
| 5         | 2020-2-16  |
| 7         | 2020-3-8   |
| 4         | 2020-5-17  |
| 1         | 2020-10-24 |
| 6         | 2021-1-5   |
+-----------+------------+
Rides table:
+---------+---------+--------------+
| ride_id | user_id | requested_at |
+---------+---------+--------------+
| 6       | 75      | 2019-12-9    |
| 1       | 54      | 2020-2-9     |
| 10      | 63      | 2020-3-4     |
| 19      | 39      | 2020-4-6     |
| 3       | 41      | 2020-6-3     |
| 13      | 52      | 2020-6-22    |
| 7       | 69      | 2020-7-16    |
| 17      | 70      | 2020-8-25    |
| 20      | 81      | 2020-11-2    |
| 5       | 57      | 2020-11-9    |
| 2       | 42      | 2020-12-9    |
| 11      | 68      | 2021-1-11    |
| 15      | 32      | 2021-1-17    |
| 12      | 11      | 2021-1-19    |
| 14      | 18      | 2021-1-27    |
+---------+---------+--------------+
AcceptedRides table:
+---------+-----------+---------------+---------------+
| ride_id | driver_id | ride_distance | ride_duration |
+---------+-----------+---------------+---------------+
| 10      | 10        | 63            | 38            |
| 13      | 10        | 73            | 96            |
| 7       | 8         | 100           | 28            |
| 17      | 7         | 119           | 68            |
| 20      | 1         | 121           | 92            |
| 5       | 7         | 42            | 101           |
| 2       | 4         | 6             | 38            |
| 11      | 8         | 37            | 43            |
| 15      | 8         | 108           | 82            |
| 12      | 8         | 38            | 34            |
| 14      | 1         | 90            | 74            |
+---------+-----------+---------------+---------------+
Output: 
+-------+----------------+----------------+
| month | active_drivers | accepted_rides |
+-------+----------------+----------------+
| 1     | 2              | 0              |
| 2     | 3              | 0              |
| 3     | 4              | 1              |
| 4     | 4              | 0              |
| 5     | 5              | 0              |
| 6     | 5              | 1              |
| 7     | 5              | 1              |
| 8     | 5              | 1              |
| 9     | 5              | 0              |
| 10    | 6              | 0              |
| 11    | 6              | 2              |
| 12    | 6              | 1              |
+-------+----------------+----------------+
Explanation: 
By the end of January --> two active drivers (10, 8) and no accepted rides.
By the end of February --> three active drivers (10, 8, 5) and no accepted rides.
By the end of March --> four active drivers (10, 8, 5, 7) and one accepted ride (10).
By the end of April --> four active drivers (10, 8, 5, 7) and no accepted rides.
By the end of May --> five active drivers (10, 8, 5, 7, 4) and no accepted rides.
By the end of June --> five active drivers (10, 8, 5, 7, 4) and one accepted ride (13).
By the end of July --> five active drivers (10, 8, 5, 7, 4) and one accepted ride (7).
By the end of August --> five active drivers (10, 8, 5, 7, 4) and one accepted ride (17).
By the end of September --> five active drivers (10, 8, 5, 7, 4) and no accepted rides.
By the end of October --> six active drivers (10, 8, 5, 7, 4, 1) and no accepted rides.
By the end of November --> six active drivers (10, 8, 5, 7, 4, 1) and two accepted rides (20, 5).
By the end of December --> six active drivers (10, 8, 5, 7, 4, 1) and one accepted ride (2).

with RECURSIVE the_month as(
    select 1 as month
    union
    select month+1
    from the_month
    where month <12
)

| month |
| ----- |
| 1     |
| 2     |
| 3     |
| 4     |
| 5     |
| 6     |
| 7     |
| 8     |
| 9     |
| 10    |
| 11    |
| 12    |

| driver_id | join_date  | month_rider |
| --------- | ---------- | ----------- |
| 8         | 2020-01-13 | 01          |
| 5         | 2020-02-16 | 02          |
| 7         | 2020-03-08 | 03          |
| 4         | 2020-05-17 | 05          |
| 1         | 2020-10-24 | 10          |

select *, date_format(join_date, '%c') month_rider
from Drivers
where join_date between '2020-01-01' and date_add('2020-01-01', interval 364 day)

| driver_id | join_date  | month_rider |
| --------- | ---------- | ----------- |
| 8         | 2020-01-13 | 1           |
| 5         | 2020-02-16 | 2           |
| 7         | 2020-03-08 | 3           |
| 4         | 2020-05-17 | 5           |

| driver_id | join_date  | month_rider | number_driver |
| --------- | ---------- | ----------- | ------------- |
| 8         | 2020-01-13 | 1           | 1             |
| 5         | 2020-02-16 | 2           | 1             |
| 7         | 2020-03-08 | 3           | 1             |
| 4         | 2020-05-17 | 5           | 1             |
| 1         | 2020-10-24 | 10          | 1             |

select *, sum(number_driver) over (order by month_rider) active_drivers
from(select *, date_format(join_date, '%m') month_rider, count(*) number_driver
from Drivers
where join_date between '2020-01-01' and date_add('2020-01-01', interval 364 day)
group by date_format(join_date, '%m'))t

| driver_id | join_date  | month_rider | number_driver | active_drivers |
| --------- | ---------- | ----------- | ------------- | -------------- |
| 8         | 2020-01-13 | 01          | 1             | 1              |
| 5         | 2020-02-16 | 02          | 1             | 2              |
| 7         | 2020-03-08 | 03          | 1             | 3              |
| 4         | 2020-05-17 | 05          | 1             | 4              |
| 1         | 2020-10-24 | 10          | 1             | 5              |

select *
from (select *, sum(number_driver) over (order by month_rider) active_drivers
from(select *, date_format(join_date, '%m') month_rider, count(*) number_driver
from Drivers
group by date_format(join_date, '%Y-%m'))t)m
where join_date between '2020-01-01' and date_add('2020-01-01', interval 364 day)

| driver_id | join_date  | month_rider | number_driver | active_drivers |
| --------- | ---------- | ----------- | ------------- | -------------- |
| 8         | 2020-01-13 | 01          | 1             | 2              |
| 5         | 2020-02-16 | 02          | 1             | 3              |
| 7         | 2020-03-08 | 03          | 1             | 4              |
| 4         | 2020-05-17 | 05          | 1             | 5              |

select (
    case
    when month_rider = '01' then 1
    when month_rider = '02' then 2
    when month_rider = '03' then 3
    when month_rider = '04' then 4
    when month_rider = '05' then 5
    when month_rider = '06' then 6
    when month_rider = '07' then 7
    when month_rider = '08' then 8
    when month_rider = '09' then 9
    when month_rider = '10' then 10
    when month_rider = '11' then 11
    else 12 end
)month,active_drivers
from (select *, sum(number_driver) over (order by month_rider) active_drivers
from(select *, date_format(join_date, '%m') month_rider, count(*) number_driver
from Drivers
group by date_format(join_date, '%Y-%m'))t)m
where join_date between '2020-01-01' and date_add('2020-01-01', interval 364 day)

#partial solution
with RECURSIVE the_month as(
    select 1 as month
    union
    select month+1
    from the_month
    where month <12
)
select *
from the_month t left join (select (
    case
    when month_rider = '01' then 1
    when month_rider = '02' then 2
    when month_rider = '03' then 3
    when month_rider = '04' then 4
    when month_rider = '05' then 5
    when month_rider = '06' then 6
    when month_rider = '07' then 7
    when month_rider = '08' then 8
    when month_rider = '09' then 9
    when month_rider = '10' then 10
    when month_rider = '11' then 11
    else 12 end
)month,active_drivers
from (select *, sum(number_driver) over (order by month_rider) active_drivers
from(select *, date_format(join_date, '%m') month_rider, count(*) number_driver
from Drivers
group by date_format(join_date, '%Y-%m'))t)m
where join_date between '2020-01-01' and date_add('2020-01-01', interval 364 day))m
using(month)

| month | active_drivers |
| ----- | -------------- |
| 1     | 2              |
| 2     | 3              |
| 3     | 4              |
| 4     |                |
| 5     | 5              |
| 6     |                |
| 7     |                |
| 8     |                |
| 9     |                |
| 10    | 6              |
| 11    |                |
| 12    |                |
