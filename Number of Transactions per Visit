
A bank wants to draw a chart of the number of transactions bank visitors did in one visit to the bank and the corresponding number of visitors who have done this number of transaction in one visit.

Write an SQL query to find how many users visited the bank and didn't do any transactions, how many visited the bank and did one transaction and so on.

The result table will contain two columns:

transactions_count which is the number of transactions done in one visit.
visits_count which is the corresponding number of users who did transactions_count in one visit to the bank.
transactions_count should take all values from 0 to max(transactions_count) done by one or more users.

Return the result table ordered by transactions_count.

The query result format is in the following example.

 

Example 1:


Input: 
Visits table:
+---------+------------+
| user_id | visit_date |
+---------+------------+
| 1       | 2020-01-01 |
| 2       | 2020-01-02 |
| 12      | 2020-01-01 |
| 19      | 2020-01-03 |
| 1       | 2020-01-02 |
| 2       | 2020-01-03 |
| 1       | 2020-01-04 |
| 7       | 2020-01-11 |
| 9       | 2020-01-25 |
| 8       | 2020-01-28 |
+---------+------------+
Transactions table:
+---------+------------------+--------+
| user_id | transaction_date | amount |
+---------+------------------+--------+
| 1       | 2020-01-02       | 120    |
| 2       | 2020-01-03       | 22     |
| 7       | 2020-01-11       | 232    |
| 1       | 2020-01-04       | 7      |
| 9       | 2020-01-25       | 33     |
| 9       | 2020-01-25       | 66     |
| 8       | 2020-01-28       | 1      |
| 9       | 2020-01-25       | 99     |
+---------+------------------+--------+
Output: 
+--------------------+--------------+
| transactions_count | visits_count |
+--------------------+--------------+
| 0                  | 4            |
| 1                  | 5            |
| 2                  | 0            |
| 3                  | 1            |
+--------------------+--------------+
Explanation: The chart drawn for this example is shown above.
* For transactions_count = 0, The visits (1, "2020-01-01"), (2, "2020-01-02"), (12, "2020-01-01") and (19, "2020-01-03") did no transactions so visits_count = 4.
* For transactions_count = 1, The visits (2, "2020-01-03"), (7, &quo;2020-01-11"), (8, "2020-01-28"), (1, "2020-01-02") and (1, "2020-01-04") did one transaction so visits_count = 5.
* For transactions_count = 2, No customers visited the bank and did two transactions so visits_count = 0.
* For transactions_count = 3, The visit (9, "2020-01-25") did three transactions so visits_count = 1.
* For transactions_count >= 4, No customers visited the bank and did more than three transactions so we will stop at transactions_count = 3


select *
from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date
order by v.user_id


| user_id | visit_date | user_id | transaction_date | amount |
| ------- | ---------- | ------- | ---------------- | ------ |
| 1       | 2020-01-01 |         |                  |        |
| 1       | 2020-01-02 | 1       | 2020-01-02       | 120    |
| 1       | 2020-01-04 | 1       | 2020-01-04       | 7      |
| 2       | 2020-01-02 |         |                  |        |
| 2       | 2020-01-03 | 2       | 2020-01-03       | 22     |
| 7       | 2020-01-11 | 7       | 2020-01-11       | 232    |
| 8       | 2020-01-28 | 8       | 2020-01-28       | 1      |
| 9       | 2020-01-25 | 9       | 2020-01-25       | 99     |
| 9       | 2020-01-25 | 9       | 2020-01-25       | 66     |
| 9       | 2020-01-25 | 9       | 2020-01-25       | 33     |
| 12      | 2020-01-01 |         |                  |        |
| 19      | 2020-01-03 |         |                  |        |

select '0' transactions_count, count(*) visits_count
from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date
where transaction_date is null
order by v.user_id


select count(*) visits_count
from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date
where transaction_date is not null
group by v.user_id,transaction_date

| visits_count |
| ------------ |
| 1            |
| 1            |
| 1            |
| 1            |
| 3            |
| 1            |

| transactions_count | visits_count |
| ------------------ | ------------ |
| 1                  | 5            |
| 3                  | 1            |


with cte as(
    select '0' transactions_count, count(*) visits_count
from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date
where transaction_date is null
order by v.user_id
)
select visits_count transactions_count, count(visits_count) visits_count
from (select count(*) visits_count
from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date
where transaction_date is not null
group by v.user_id,transaction_date)t
group by visits_count
union
select *
from cte
order by transactions_count

| transactions_count | visits_count |
| ------------------ | ------------ |
| 0                  | 4            |
| 1                  | 5            |
| 3                  | 1            |


# Write your MySQL query statement below
with RECURSIVE missing_one as(
    select 1 as id
    union
    select id+1
    from missing_one where id < 20
), base as(
    select visits_count transactions_count, count(visits_count) visits_count
    from (select count(*) visits_count
    from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date
    where transaction_date is not null
    group by v.user_id,transaction_date)t
    group by visits_count
), cte as(
    select '0' transactions_count, count(*) visits_count
    from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date
    where transaction_date is null
    order by v.user_id
)
select *
from cte
union
select id transactions_count, ifnull(visits_count,0) visits_count
from missing_one m left join ( select transactions_count,visits_count from base group by transactions_count) b on b.transactions_count=m.id
where id <= (select max(transactions_count) from base)
