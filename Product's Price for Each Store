Write an SQL query to find the price of each product in each store.

Return the result table in any order.

The query result format is in the following example.

Example 1:

Input: 
Products table:
+-------------+--------+-------+
| product_id  | store  | price |
+-------------+--------+-------+
| 0           | store1 | 95    |
| 0           | store3 | 105   |
| 0           | store2 | 100   |
| 1           | store1 | 70    |
| 1           | store3 | 80    |
+-------------+--------+-------+
Output: 
+-------------+--------+--------+--------+
| product_id  | store1 | store2 | store3 |
+-------------+--------+--------+--------+
| 0           | 95     | 100    | 105    |
| 1           | 70     | null   | 80     |
+-------------+--------+--------+--------+
Explanation: 
Product 0 price's are 95 for store1, 100 for store2 and, 105 for store3.
Product 1 price's are 70 for store1, 80 for store3 and, it's not sold in store2.

select product_id, price store1
from products
where store = 'store1'

| product_id | store1 |
| ---------- | ------ |
| 0          | 95     |
| 1          | 70     |

| product_id | store1 | product_id | store2 | product_id | store3 |
| ---------- | ------ | ---------- | ------ | ---------- | ------ |
| 0          | 95     | 0          | 100    | 0          | 105    |
| 1          | 70     |            |        | 1          | 80     |

#solution
with cte as(
    select c.product_id,store1
    from (select distinct product_id from products) c left join (select product_id, price store1
from products
where store = 'store1')t on c.product_id = t.product_id
), cte2 as(select product_id, price store2
from products
where store = 'store2'), cte3 as(select product_id, price store3
from products
where store = 'store3')
select c1.product_id, store1,store2,store3
from cte c1 left join cte2 c2 on c1.product_id=c2.product_id
left join cte3 c3 on c1.product_id = c3.product_id
