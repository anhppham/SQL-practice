A bank account is suspicious if the total income exceeds the max_income for this account for two or more consecutive months. The total income of an account in some month is the sum of all its deposits in that month (i.e., transactions of the type 'Creditor').

Write an SQL query to report the IDs of all suspicious bank accounts.

Return the result table ordered by transaction_id in ascending order.

The query result format is in the following example.

 

Example 1:

Input: 
Accounts table:
+------------+------------+
| account_id | max_income |
+------------+------------+
| 3          | 21000      |
| 4          | 10400      |
+------------+------------+
Transactions table:
+----------------+------------+----------+--------+---------------------+
| transaction_id | account_id | type     | amount | day                 |
+----------------+------------+----------+--------+---------------------+
| 2              | 3          | Creditor | 107100 | 2021-06-02 11:38:14 |
| 4              | 4          | Creditor | 10400  | 2021-06-20 12:39:18 |
| 11             | 4          | Debtor   | 58800  | 2021-07-23 12:41:55 |
| 1              | 4          | Creditor | 49300  | 2021-05-03 16:11:04 |
| 15             | 3          | Debtor   | 75500  | 2021-05-23 14:40:20 |
| 10             | 3          | Creditor | 102100 | 2021-06-15 10:37:16 |
| 14             | 4          | Creditor | 56300  | 2021-07-21 12:12:25 |
| 19             | 4          | Debtor   | 101100 | 2021-05-09 15:21:49 |
| 8              | 3          | Creditor | 64900  | 2021-07-26 15:09:56 |
| 7              | 3          | Creditor | 90900  | 2021-06-14 11:23:07 |
+----------------+------------+----------+--------+---------------------+
Output: 
+------------+
| account_id |
+------------+
| 3          |
+------------+
Explanation: 
For account 3:
- In 6-2021, the user had an income of 107100 + 102100 + 90900 = 300100.
- In 7-2021, the user had an income of 64900.
We can see that the income exceeded the max income of 21000 for two consecutive months, so we include 3 in the result table.

For account 4:
- In 5-2021, the user had an income of 49300.
- In 6-2021, the user had an income of 10400.
- In 7-2021, the user had an income of 56300.
We can see that the income exceeded the max income in May and July, but not in June. Since the account did not exceed the max income for two consecutive months, we do not include it in the result table.

select *, (case
    when sum_amount > max_income then 'y'
    else 'n' end) selection
from (select distinct account_id, sum(amount) sum_amount
from transactions 
where type = 'Creditor'
group by account_id,date_format(day, '%Y-%m')) t left join accounts a using(account_id)

| account_id | sum_amount | max_income | selection |
| ---------- | ---------- | ---------- | --------- |
| 3          | 64900      | 21000      | y         |
| 3          | 300100     | 21000      | y         |
| 4          | 10400      | 10400      | n         |
| 4          | 49300      | 10400      | y         |
| 4          | 56300      | 10400      | y         |


select *, (case
    when sum_amount > max_income then 'y'
    else 'n' end) selection
from (select distinct account_id, sum(amount) sum_amount
from transactions 
where type = 'Creditor'
group by account_id,date_format(day, '%Y-%m')
having count(*) >= 2) t left join accounts a using(account_id)

| account_id | sum_amount | max_income | selection |
| ---------- | ---------- | ---------- | --------- |
| 10         | 69000      | 82000      | n         |

select distinct account_id,date_format(day, '%Y-%m') month, sum(amount) sum_amount
from transactions 
where type = 'Creditor'
group by account_id,date_format(day, '%Y-%m')
order by account_id,date_format(day, '%Y-%m')
#having count(*) >= 2

with cte as (
    select *, ifnull((month - lag(month,1) over (partition by account_id order by month)),0) previous_month
from (select distinct account_id,date_format(day, '%m') month, sum(amount) sum_amount
from transactions 
where type = 'Creditor'
group by account_id,date_format(day, '%Y-%m')
order by account_id,date_format(day, '%Y-%m'))t
), cte2 as(
    select *
    from cte
    where previous_month in (0,1)
    group by account_id
    having count(account_id) >= 2
)
select *
from (select * from cte where previous_month in (0,1))t left join accounts using(account_id)
where account_id in (select account_id from cte2) #and (sum_amount > max_income)


#solution
with cte as (
    select t.account_id,date_format(day, '%m') month, sum(amount) sum_amount,max_income
from transactions t left join accounts a on t.account_id = a.account_id
where type = 'Creditor'
group by account_id,date_format(day, '%Y-%m')
order by account_id,date_format(day, '%Y-%m')
), cte2 as(
    select *
from cte
where sum_amount > max_income
)
select c1.account_id
from cte2 c1, cte2 c2
where c1.account_id = c2.account_id and period_diff(c1.month,c2.month) = 1
group by c1.account_id
order by c1.account_id

| account_id | month | sum_amount | max_income | account_id | month | sum_amount | max_income |
| ---------- | ----- | ---------- | ---------- | ---------- | ----- | ---------- | ---------- |
| 3          | 06    | 300100     | 21000      | 3          | 07    | 64900      | 21000      |
| 3          | 06    | 300100     | 21000      | 3          | 06    | 300100     | 21000      |
| 3          | 07    | 64900      | 21000      | 3          | 07    | 64900      | 21000      |
| 3          | 07    | 64900      | 21000      | 3          | 06    | 300100     | 21000      |
| 4          | 05    | 49300      | 10400      | 4          | 05    | 49300      | 10400      |
| 4          | 05    | 49300      | 10400      | 4          | 07    | 56300      | 10400      |
| 4          | 07    | 56300      | 10400      | 4          | 05    | 49300      | 10400      |
| 4          | 07    | 56300      | 10400      | 4          | 07    | 56300      | 10400      |

| account_id | month | sum_amount | max_income | account_id | month | sum_amount | max_income |
| ---------- | ----- | ---------- | ---------- | ---------- | ----- | ---------- | ---------- |
| 3          | 07    | 64900      | 21000      | 3          | 06    | 300100     | 21000      |
